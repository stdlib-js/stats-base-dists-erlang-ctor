{"version":3,"file":"index.mjs","sources":["../lib/ctor.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nvar defineProperty = require( '@stdlib/utils-define-property' );\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils-define-nonenumerable-read-only-accessor' );\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' ).isPrimitive;\nvar isPositive = require( '@stdlib/assert-is-positive-number' ).isPrimitive;\nvar entropy = require( '@stdlib/stats-base-dists-erlang-entropy' );\nvar kurtosis = require( '@stdlib/stats-base-dists-erlang-kurtosis' );\nvar mean = require( '@stdlib/stats-base-dists-erlang-mean' );\nvar mode = require( '@stdlib/stats-base-dists-erlang-mode' );\nvar skewness = require( '@stdlib/stats-base-dists-erlang-skewness' );\nvar stdev = require( '@stdlib/stats-base-dists-erlang-stdev' );\nvar variance = require( '@stdlib/stats-base-dists-erlang-variance' );\nvar cdf = require( '@stdlib/stats-base-dists-erlang-cdf' );\nvar logpdf = require( '@stdlib/stats-base-dists-erlang-logpdf' );\nvar mgf = require( '@stdlib/stats-base-dists-erlang-mgf' );\nvar pdf = require( '@stdlib/stats-base-dists-erlang-pdf' );\nvar quantile = require( '@stdlib/stats-base-dists-erlang-quantile' );\nvar format = require( '@stdlib/string-format' );\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n*/\nfunction erlangCDF( x ) {\n\treturn cdf( x, this.k, this.lambda );\n}\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n*/\nfunction erlangLogPDF( x ) {\n\treturn logpdf( x, this.k, this.lambda );\n}\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @private\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n*/\nfunction erlangMGF( t ) {\n\treturn mgf( t, this.k, this.lambda );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction erlangPDF( x ) {\n\treturn pdf( x, this.k, this.lambda );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction erlangQuantile( p ) {\n\treturn quantile( p, this.k, this.lambda );\n}\n\n\n// MAIN //\n\n/**\n* Erlang distribution constructor.\n*\n* @constructor\n* @param {PositiveInteger} [k=1.0] - shape parameter\n* @param {PositiveNumber} [lambda=1.0] - rate parameter\n* @throws {TypeError} `k` must be a positive integer\n* @throws {TypeError} `lambda` must be a positive number\n* @returns {Erlang} distribution instance\n*\n* @example\n* var erlang = new Erlang( 1.0, 1.0 );\n*\n* var y = erlang.cdf( 0.8 );\n* // returns ~0.551\n*\n* var v = erlang.mode;\n* // returns 0.0\n*/\nfunction Erlang() {\n\tvar lambda;\n\tvar k;\n\tif ( !(this instanceof Erlang) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new Erlang();\n\t\t}\n\t\treturn new Erlang( arguments[ 0 ], arguments[ 1 ] );\n\t}\n\tif ( arguments.length ) {\n\t\tk = arguments[ 0 ];\n\t\tlambda = arguments[ 1 ];\n\t\tif ( !isPositiveInteger( k ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Shape parameter `k` must be a positive integer. Value: `%s`.', k ) );\n\t\t}\n\t\tif ( !isPositive( lambda ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Rate parameter `lambda` must be a positive number. Value: `%s`.', lambda ) );\n\t\t}\n\t} else {\n\t\tk = 1.0;\n\t\tlambda = 1.0;\n\t}\n\tdefineProperty( this, 'k', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn k;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositiveInteger( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid value. Must be a positive integer. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tk = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'lambda', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn lambda;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid value. Must be a positive number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tlambda = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Erlang distribution differential entropy.\n*\n* @name entropy\n* @memberof Erlang.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var erlang = new Erlang( 4, 12.0 );\n*\n* var v = erlang.entropy;\n* // returns ~-0.462\n*/\nsetReadOnlyAccessor( Erlang.prototype, 'entropy', function get() {\n\treturn entropy( this.k, this.lambda );\n});\n\n/**\n* Erlang distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof Erlang.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var erlang = new Erlang( 4, 12.0 );\n*\n* var v = erlang.kurtosis;\n* // returns 1.5\n*/\nsetReadOnlyAccessor( Erlang.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.k, this.lambda );\n});\n\n/**\n* Erlang distribution expected value.\n*\n* @name mean\n* @memberof Erlang.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var erlang = new Erlang( 4, 12.0 );\n*\n* var v = erlang.mean;\n* // returns ~0.333\n*/\nsetReadOnlyAccessor( Erlang.prototype, 'mean', function get() {\n\treturn mean( this.k, this.lambda );\n});\n\n/**\n* Erlang distribution mode.\n*\n* @name mode\n* @memberof Erlang.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var erlang = new Erlang( 4, 12.0 );\n*\n* var v = erlang.mode;\n* // returns 0.25\n*/\nsetReadOnlyAccessor( Erlang.prototype, 'mode', function get() {\n\treturn mode( this.k, this.lambda );\n});\n\n/**\n* Erlang distribution skewness.\n*\n* @name skewness\n* @memberof Erlang.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var erlang = new Erlang( 4, 12.0 );\n*\n* var v = erlang.skewness;\n* // returns 1.0\n*/\nsetReadOnlyAccessor( Erlang.prototype, 'skewness', function get() {\n\treturn skewness( this.k, this.lambda );\n});\n\n/**\n* Erlang distribution standard deviation.\n*\n* @name stdev\n* @memberof Erlang.prototype\n* @type {number}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var erlang = new Erlang( 4, 12.0 );\n*\n* var v = erlang.stdev;\n* // returns ~0.167\n*/\nsetReadOnlyAccessor( Erlang.prototype, 'stdev', function get() {\n\treturn stdev( this.k, this.lambda );\n});\n\n/**\n* Erlang distribution variance.\n*\n* @name variance\n* @memberof Erlang.prototype\n* @type {number}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var erlang = new Erlang( 4, 12.0 );\n*\n* var v = erlang.variance;\n* // returns ~0.028\n*/\nsetReadOnlyAccessor( Erlang.prototype, 'variance', function get() {\n\treturn variance( this.k, this.lambda );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Erlang.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var erlang = new Erlang( 2, 4.0 );\n*\n* var v = erlang.cdf( 0.5 );\n* // returns ~0.594\n*/\nsetReadOnly( Erlang.prototype, 'cdf', erlangCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @name logpdf\n* @memberof Erlang.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var erlang = new Erlang( 2, 4.0 );\n*\n* var v = erlang.logpdf( 2.0 );\n* // returns ~-4.534\n*/\nsetReadOnly( Erlang.prototype, 'logpdf', erlangLogPDF );\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @name mgf\n* @memberof Erlang.prototype\n* @type {Function}\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}\n*\n* @example\n* var erlang = new Erlang( 2, 4.0 );\n*\n* var v = erlang.mgf( 0.5 );\n* // returns ~1.306\n*/\nsetReadOnly( Erlang.prototype, 'mgf', erlangMGF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof Erlang.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var erlang = new Erlang( 2, 4.0 );\n*\n* var v = erlang.pdf( 2.0 );\n* // returns ~0.011\n*/\nsetReadOnly( Erlang.prototype, 'pdf', erlangPDF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Erlang.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var erlang = new Erlang( 2, 4.0 );\n*\n* var v = erlang.quantile( 0.5 );\n* // returns ~0.42\n*/\nsetReadOnly( Erlang.prototype, 'quantile', erlangQuantile );\n\n\n// EXPORTS //\n\nmodule.exports = Erlang;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Erlang distribution constructor.\n*\n* @module @stdlib/stats-base-dists-erlang-ctor\n*\n* @example\n* var Erlang = require( '@stdlib/stats-base-dists-erlang-ctor' );\n*\n* var erlang = new Erlang( 1, 1.0 );\n*\n* var y = erlang.cdf( 0.8 );\n* // returns ~0.551\n*\n* var mode = erlang.mode;\n* // returns 0.0\n*/\n\n// MODULES //\n\nvar ctor = require( './ctor.js' );\n\n\n// EXPORTS //\n\nmodule.exports = ctor;\n"],"names":["defineProperty","require$$0","setReadOnly","require$$1","setReadOnlyAccessor","require$$2","isPositiveInteger","require$$3","isPrimitive","isPositive","require$$4","entropy","require$$5","kurtosis","require$$6","mean","require$$7","mode","require$$8","skewness","require$$9","stdev","require$$10","variance","require$$11","cdf","require$$12","logpdf","require$$13","mgf","require$$14","pdf","require$$15","quantile","require$$16","format","require$$17","Erlang","lambda","k","this","arguments","length","TypeError","configurable","enumerable","get","set","value","prototype","x","t","p","lib"],"mappings":";;0tDAwBA,IAAIA,EAAiBC,EACjBC,EAAcC,EACdC,EAAsBC,EACtBC,EAAoBC,EAAgDC,YACpEC,EAAaC,EAA+CF,YAC5DG,EAAUC,EACVC,EAAWC,EACXC,EAAOC,EACPC,EAAOC,EACPC,EAAWC,EACXC,EAAQC,EACRC,EAAWC,EACXC,EAAMC,EACNC,EAASC,EACTC,EAAMC,EACNC,EAAMC,EACNC,EAAWC,EACXC,EAASC,EAkFb,SAASC,IACR,IAAIC,EACAC,EACJ,KAAOC,gBAAgBH,GACtB,OAA0B,IAArBI,UAAUC,OACP,IAAIL,EAEL,IAAIA,EAAQI,UAAW,GAAKA,UAAW,IAE/C,GAAKA,UAAUC,OAAS,CAGvB,GADAJ,EAASG,UAAW,IACdnC,EAFNiC,EAAIE,UAAW,IAGd,MAAM,IAAIE,UAAWR,EAAQ,iFAAkFI,IAEhH,IAAM9B,EAAY6B,GACjB,MAAM,IAAIK,UAAWR,EAAQ,oFAAqFG,SAGnHC,EAAI,EACJD,EAAS,EA4BV,OA1BAtC,EAAgBwC,KAAM,IAAK,CAC1BI,cAAgB,EAChBC,YAAc,EACdC,IAAO,WACN,OAAOP,GAERQ,IAAO,SAAcC,GACpB,IAAM1C,EAAmB0C,GACxB,MAAM,IAAIL,UAAWR,EAAQ,0DAA2Da,IAEzFT,EAAIS,KAGNhD,EAAgBwC,KAAM,SAAU,CAC/BI,cAAgB,EAChBC,YAAc,EACdC,IAAO,WACN,OAAOR,GAERS,IAAO,SAAcC,GACpB,IAAMvC,EAAYuC,GACjB,MAAM,IAAIL,UAAWR,EAAQ,yDAA0Da,IAExFV,EAASU,KAGJR,KAiBRpC,EAAqBiC,EAAOY,UAAW,WAAW,WACjD,OAAOtC,EAAS6B,KAAKD,EAAGC,KAAKF,WAiB9BlC,EAAqBiC,EAAOY,UAAW,YAAY,WAClD,OAAOpC,EAAU2B,KAAKD,EAAGC,KAAKF,WAiB/BlC,EAAqBiC,EAAOY,UAAW,QAAQ,WAC9C,OAAOlC,EAAMyB,KAAKD,EAAGC,KAAKF,WAiB3BlC,EAAqBiC,EAAOY,UAAW,QAAQ,WAC9C,OAAOhC,EAAMuB,KAAKD,EAAGC,KAAKF,WAiB3BlC,EAAqBiC,EAAOY,UAAW,YAAY,WAClD,OAAO9B,EAAUqB,KAAKD,EAAGC,KAAKF,WAiB/BlC,EAAqBiC,EAAOY,UAAW,SAAS,WAC/C,OAAO5B,EAAOmB,KAAKD,EAAGC,KAAKF,WAiB5BlC,EAAqBiC,EAAOY,UAAW,YAAY,WAClD,OAAO1B,EAAUiB,KAAKD,EAAGC,KAAKF,WAmB/BpC,EAAamC,EAAOY,UAAW,OAvQ/B,SAAoBC,GACnB,OAAOzB,EAAKyB,EAAGV,KAAKD,EAAGC,KAAKF,WAwR7BpC,EAAamC,EAAOY,UAAW,UA9Q/B,SAAuBC,GACtB,OAAOvB,EAAQuB,EAAGV,KAAKD,EAAGC,KAAKF,WA+RhCpC,EAAamC,EAAOY,UAAW,OArR/B,SAAoBE,GACnB,OAAOtB,EAAKsB,EAAGX,KAAKD,EAAGC,KAAKF,WAsS7BpC,EAAamC,EAAOY,UAAW,OA5R/B,SAAoBC,GACnB,OAAOnB,EAAKmB,EAAGV,KAAKD,EAAGC,KAAKF,WA6S7BpC,EAAamC,EAAOY,UAAW,YAnS/B,SAAyBG,GACxB,OAAOnB,EAAUmB,EAAGZ,KAAKD,EAAGC,KAAKF,WAuSlC,IC7VAe,ED6ViBhB"}